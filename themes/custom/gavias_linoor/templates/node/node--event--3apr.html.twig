{%
  set classes = [
    'node',
    'node-detail',
    'node--type-' ~ node.bundle|clean_class,
    node.isPromoted() ? 'node--promoted',
    node.isSticky() ? 'node--sticky',
    not node.isPublished() ? 'node--unpublished',
    view_mode ? 'node--view-mode-' ~ view_mode|clean_class,
    'clearfix',
  ]
%}
{% set conBody  %}
  {{ content.body }}
{% endset %}

<!-- Start Display article for teaser page -->
{% if view_mode == 'teaser' %}
  <article{{ attributes.addClass(classes) }}>
    <div class="event-block">
      <div class="event-image text-center">
        {{ content.field_event_image }}
        <div class="date">
          <span class="day">{{ node.field_event_start.value|date('j') }}</span><span class="month">{{ node.field_event_start.value|date('F') }}</span>
        </div>
      </div>
      <div class="event-content">
        <div class="event-info">
          <div class="title"><a href="{{ url }}" rel="bookmark">{{ label }}</a></div>
          <div class="event-meta">
            <span class="event-time"> {{ node.field_event_time.value }} </span>&nbsp;-&nbsp;<span class="event-address"> {{ node.field_event_address.value }} </span>
          </div>
          <div class="body">{{ conBody|striptags }}</div>
        </div>
      </div>
    </div>
  </article>

{% elseif view_mode == 'teaser_2' %}

  <div class="event-block-2">
    <div class="event-image text-center">
      {{ content.field_event_image }}
      <div class="event-date">
        <span class="date">{{ event_date.day }}</span>
        <span class="month">{{ event_date.month }}</span>
      </div>
    </div>
    <div class="content-inner clearfix">
      <div class="event-content-inner">
        <div class="event-content">
          <h3{{ title_attributes.addClass('post-title') }}><a href="{{ url }}" rel="bookmark">{{ label }}</a></h3>
          <div class="event-meta">
            <span class="event-time"> {{ node.field_event_time.value }} </span>&nbsp;&nbsp;-&nbsp;&nbsp;<span class="event-address"> {{ node.field_event_address.value }} </span>
          </div>
          <div class="event-line"></div>
          <div class="event-description">{{ conBody|striptags }}</div>
        </div>
      </div>
    </div>
  </div>

{% else %}

<article{{ attributes.addClass(classes.addClass('node-detail')) }}>
  <div class="post-block event-full">
    <div class="post-thumbnail">
      <!-- { content.field_event_image }} -->

      <div id="renderer" class="light-body" style=' {{ content.field_event_image }} '>
        <div class='light x1'></div>
        <div class='light x2'></div>
        <div class='light x3'></div>
        <div class='light x4'></div>
        <div class='light x5'></div>
        <div class='light x6'></div>
        <div class='light x7'></div>
        <div class='light x8'></div>
        <div class='light x9'></div>
      </div>

      <!-- <p id="status" class="blink">Please Hit the Connect button to Start</p> -->

      <div id="status" class="start-time"><i class="fa fa-clock-o" aria-hidden="true"></i> <span id="start-time-countdown"> Eating Starts </span> </div>

      <h3>Enjoy your Eatin</h3>

      <button id="joinLeaveButton" class="" value="{{ content.field_token.0 }}" onclick="joinCall()">Join Eatin <i class="fa fa-play" aria-hidden="true"></i> </button>

      <button id="displayNameButton" onclick="SendChatMessage()" value="{{ user.displayname }}" title="displayNameButton" class="toolbarButton ">Send Message</button>

      <button id="resourceIdButton" value="{{ node.label }}" onclick="messagecheck()" title="resourceIdButton" class="toolbarButton">Recieve Message</button>

      <!-- <button id="joinLeaveButton"  title="Join Conference" class="toolbarButton callStart blink"></button> -->

      <!-- Chat -->

      <div class="chat-popup" id="ChatForm">
          <form  class="form-container">
            <h1>Chat</h1>

        <label for="msg"><b>Message</b></label>
          <textarea placeholder="Type message.." name="msg" required></textarea>

          <button type="submit"  class="btn">Send</button>
          <button type="button" class="btn cancel" onclick="closeForm()">Close</button>
          </form>
      </div>

      </div>

      <div class="event-info clearfix">
          <div class="date"><i class="fa fa-clock"></i>{{ node.field_start_time_date.value|date("g:ia")  }} </div>
        <div class="date"><i class="fa fa-calendar"></i>{{ node.field_start_time_date.value|date("d M y")  }} </div>
        <div ><i class="fa fa-map-marker"></i> {{ content.field_event_address }} </div>
      </div>
    </div>



    <div class="post-content">
      {{ title_prefix }}
         <h1{{ title_attributes.addClass('post-title') }}>{{ label }}</h1>
      {{ title_suffix }}

      <script>

      function messagecheck(){

        document.getElementById("status").innerHTML = "Checking Messsages";

        console.log("Checking Message");
        /* Register to receive chat messages */
        function receiveMessage(vidyoConnector){
            console.log("We got here 2");


          vidyoConnector.RegisterMessageEventListener({
              onChatMessageReceived: (participant, chatMessage) => {
                console.log("We got here 3");
                console.log(participant);
                console.log(chatMessage);

                // try {
                //   var jsonObject = JSON.parse(chatMessage.body); // verify that json is valid
                //   console.log("Received a valid Json")
                //   if (jsonObject.type === "PublicChat") {
                //     console.log("Received message from - " + participant.name);
                //     console.log("Message - " + chatMessage.body);
                //   } else if (jsonObject.type === "IndividualChat" &&
                //              jsonObject.targetId === currentUser.id) {
                //     console.log("Received private message from - " + participant.name);
                //     console.log("Message - " + chatMessage.body);
                //   }
                // }
                // catch (e) {
                //   console.log("Did not receive a valid Json: " + e);
                // }
              }
            }).then(() => {
              console.log("RegisterParticipantEventListener Success");
              document.getElementById("status").innerHTML = "Checking Messsages";
            }).catch(() => {
              console.err("RegisterParticipantEventListener Failed");
            });
        };

      };


      function SendChatMessage(){

        vidyoConnector.SendChatMessage({message:"Captain Bear"});

        document.getElementById("status").innerHTML = "Message sent";

      }
      </script>


      <script>

      var message = "send this message";

      vidyoConnector.SendChatMessage({message:"Sweet B"});

      vidyoConnector.RegisterMessageEventListener({
        onChatMessageReceived: function(participant, chatMessage) {
        /* Message received from other participant */ }
      }).then(function() {
        console.log("RegisterMessageEventListener Success");
        console.log('Panda');
        document.getElementById("status").innerHTML = "Message Recieved Captain";

      }).catch(function() {
        console.err("RegisterMessageEventListener Failed");
      });

      </script>


      <script>

  var vidyoConnector;

   // Callback method when VidyoIO is done loading (pointer to this method is passed in the onload parameter while including the
   // VidyoClient.js file)
    function onVidyoClientLoaded(status) {
      console.log("VidyoClient load state - " + status.state);
      if (status.state == "READY") {
        VC.CreateVidyoConnector({
          viewId:"renderer", // Div ID where the composited video will be rendered, see VidyoConnector.html;
          viewStyle:"VIDYO_CONNECTORVIEWSTYLE_Default", // Visual style of the composited renderer
          remoteParticipants:10, // Maximum number of participants to render
          logFileFilter:"error",
          logFileName:"",
          userData:""
        }).then(function (vc) {
          console.log("Create success");
          vidyoConnector = vc;
        }).catch(function(error){

        });
      }
    };




    function joinCall(){

      var token = document.getElementById('joinLeaveButton').value;

      var displayName = document.getElementById('displayNameButton').value;

      var resourceId = document.getElementById('resourceIdButton').value;

      // alert(displayName);
      // To join a video conference call Connect method
      vidyoConnector.Connect({
        host:"prod.vidyo.io",  // Server name, for most production apps it will be prod.vidyo.io
        token:token,          // Add generated token (https://developer.vidyo.io/documentation/4-1-16-8/getting-started#Tokens)
        displayName:displayName,  // Display name
        resourceId:"room1", // Room name
        onSuccess: function(){
          console.log("Connected!! YAY!");
          document.getElementById("status").innerHTML = "Connected!! YAY!";
          /* JavaScript Example: */
      /* Register to receive chat messages */

      /* Send chat message */
            // chatform = document.getElementById("ChatForm").value;
            // alert(chatform);

            // document.getElementById("status").innerHTML = chatMessage;
            // console.log(chatMessage);
            // for (const key of Object.keys(chatMessage)) {
            //   const val = obj[key];
            //   console.log(val);
            // }

        },
        onFailure: function(reason){
          console.error("Connection failed");
          document.getElementById("status").innerHTML = "Connection failed" + reason;
        },
        onDisconnected: function(reason) {
          console.log(" disconnected - " + reason);
          document.getElementById("status").innerHTML = "disconnected - " + reason;
        }
      })
    }






  </script>

  <script src="https://static.vidyo.io/latest/javascript/VidyoClient/VidyoClient.js?onload=onVidyoClientLoaded"></script>

  <script>

        // Set the date we're counting down to
      // var countDownDate = new Date '

      var countDownDate = new Date("{{ node.field_start_time_date.value }}");


      // Update the count down every 1 second
      var x = setInterval(function() {

        // Get today's date and time
        var now = new Date().getTime();

        // Find the distance between now and the count down date
        var distance = countDownDate - now;

        // Time calculations for days, hours, minutes and seconds
        var days = Math.floor(distance / (1000 * 60 * 60 * 24));
        var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
        var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
        var seconds = Math.floor((distance % (1000 * 60)) / 1000);

        // Output the result in an element with id="demo"
        document.getElementById("start-time-countdown").innerHTML = "Eatin Starts <br> " + days + " Days <br>" + hours + " hours <br>"
        + minutes + " mins " + seconds + " secs ";

        // If the count down is over, write some text
        if (distance < 0) {
          clearInterval(x);
          var div =document.getElementById("joinLeaveButton");
          div.classList.remove('optionsHide');
        }
      }, 1000);

  </script>



      {% if content.comment %}
        <div id="node-single-comment">
          {{ content.comment }}
        </div>
      {% endif %}

    </div>

  </div>

</article>

<!-- End Display article for detail page -->
{% endif %}
