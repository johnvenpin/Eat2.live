{%
  set classes = [
    'node',
    'node-detail',
    'node--type-' ~ node.bundle|clean_class,
    node.isPromoted() ? 'node--promoted',
    node.isSticky() ? 'node--sticky',
    not node.isPublished() ? 'node--unpublished',
    view_mode ? 'node--view-mode-' ~ view_mode|clean_class,
    'clearfix',
  ]
%}
{% set conBody  %}
  {{ content.body }}
{% endset %}



<!-- Start Display article for teaser page -->
{% if view_mode == 'teaser' %}
  <article{{ attributes.addClass(classes) }}>
    <div class="event-block">
      <div class="event-image text-center">
        {{ content.field_event_image }}
        <div class="date">
          <!-- <span class="day">{ node.field_start_time_date.value|date("m/d/Y") }}</span><span class="month">{ node.field_start_time_date.value|date("m/d/Y") }</span> -->

        </div>
      </div>
      <div class="event-content">
        <div class="event-info">
          <div class="title"><a href="{{ url }}" rel="bookmark">{{ label }}</a></div>
          <div class="event-meta">
            <span class="event-time">{{ node.field_event_time.value }} </span> <span class="event-address"> {{ node.field_event_address.value }} </span>
          </div>
          <div class="body">{{ conBody|striptags }}</div>
        </div>
      </div>
    </div>
  </article>

{% elseif view_mode == 'teaser_2' %}

  <div class="event-block-2">
    <div class="event-image text-center">
      {{ content.field_event_image }}
      <div class="event-date">

        <!-- {node.field_start_time_date.value }} -->

        {% if node.field_start_time_date.value %}
          <span class="month">{{ node.field_start_time_date.value|date('l j') }} </span>
          <span class="date">{{ node.field_start_time_date.value|date('M') }} </span>
        {% endif %}

      </div>
    </div>
    <div class="content-inner clearfix">
      <div class="event-content-inner">
        <div class="event-content">
          <h3{{ title_attributes.addClass('post-title') }}><a href="{{ url }}" rel="bookmark">{{ label }}</a></h3>
          <div class="event-meta">
            <span class="event-time">
                  {% if node.field_start_time_date.value %}
                    <span class="month">{{ node.field_start_time_date.value|date('g:i a') }} </span>
                  {% endif %}


          </span>&nbsp;&nbsp;-&nbsp;&nbsp;<span class="event-address"> {{ node.field_event_address.value }} </span>
          </div>
          <div class="event-line"></div>
          <div class="event-description">{{ conBody|striptags }}</div>
        </div>
      </div>
    </div>
  </div>

{% else %}

  <div id="renderviewlocal"> renderviewlocal </div>

    <div id="renderviewlocalcam"> renderviewlocalcam </div>

      <div id="sourceview"> sourceview </div>

      <div id="shareview"> shareview </div>

        <div id="sharevieworiginal"> sharevieworiginal </div>








<div id="video-container" class="e2lcontainer">


          <div id="renderer0" class="pluginOverlay"> 0 </div>
          <div id="renderer1" class="pluginOverlay"> 1 </div>
          <div id="renderer2" class="pluginOverlay"> 2</div>
          <div id="renderer3" class="pluginOverlay"> 3</div>
          <div id="renderer4" class="pluginOverlay"> 4</div>
          <div id="renderer5" class="pluginOverlay"> 5 </div>

          <!-- <div class="controls">

          <button id="vidButton" class="btn status" value="{ content.field_token.0 }}" onclick="joinCall()"> <i class="fas fa-video"></i> Join</button>
          <button class="btn"> <i class="fas fa-clock"></i><span id="count-down" ></span> </button>
          <button class="btn">  <div id="status">Status</div> </button>
          <button class="btn" id="fullscreen"> <i class="fas fa-expand-arrows-alt"></i></button>
            </div> -->





        <div id="toolbarCenter" class="toolbar">
          <!-- This button toggles the camera privacy on or off. -->
          <div class="toolbuttons">
            <span id="participantStatus">Hello Participant</span>
            <span id="status"></span>
            <span id="message"></span>
            <button id="cameraButton" title="Camera Privacy" class="toolbarButton cameraOn"></button>

            <button id="countdown-clock" title="Count Down Clock" class="toolbarButton"></button>

            <button id="displayNameButton" value="{{ user.displayname }}" title="displayNameButton" class="toolbarButton">Name</button>

            <button id="fullscreen" class="toolbarButton"> <i class="fas fa-expand-arrows-alt"></i></button>

              <!-- This button joins and leaves the conference. -->

            <button id="joinLeaveButton" value="{{ content.field_token.0 }}" title="Join Conference" class="toolbarButton callStart blink"></button>

            <!-- This button mutes and unmutes the users' microphone. -->
            <button id="microphoneButton" title="Microphone Privacy" class="toolbarButton microphoneOn"></button>



            <span id="count-down">Start Time:{{ node.field_start_time_date.value|date('g:i a') }}</span>

          </div>
        </div>
        <!-- <div id="toolbarLeft" class=""> -->
          <!-- <span id="participantStatus"></span> -->
        <!-- </div> -->



      <!-- <div id="renderer" > -->
        <!-- { content.field_event_image }} -->
      <!-- </div> -->
</div>

<article{{ attributes.addClass(classes.addClass('node-detail')) }}>
  <div class="post-block event-full">
    <div class="post-thumbnail">
     {{ title_prefix }}
         <h1{{ title_attributes.addClass('post-title') }}>{{ label }}</h1>
      {{ title_suffix }}
      <div >{{ conBody|striptags }}</div>
  </div>


            <div id="helper" style="background-image: url('{{ content.field_event_image }}')">

                    <div class="helperFooter" id="helperFooter">
                      <a class="btn-curve" href="javascript:joinViaBrowser()">Join the eating</a>
                    </div>

            <div>


    <div class="event-info">
      <h3>Details</h3>
      <div class="date clearfix">
        {% if node.field_start_time_date.value %}
        <p><i class="fas fa-clock"></i>{{ node.field_start_time_date.value|date("g:ia") }}  for {{ content.field_eating_duration.0 }} </p>
        <p><i class="fa fa-calendar"></i>{{ content.field_start_time_date.value | date("d M y")}}</p>
        <i class="fa fa-map-marker"></i>{{ content.field_event_address.0 }}
        <p><div id="status">Status</div></p>
        {% endif %}

    </div>

    <div class="post-content">

  <script>

//  full screen viewer
  document.addEventListener("click", function (event) {
  if (!event.target.matches("#fullscreen")) return;

  event.preventDefault();

  var fullscreenElement =
    document.fullscreenElement ||
    document.mozFullScreenElement ||
    document.webkitFullscreenElement ||
    document.msFullscreenElement;
  if (fullscreenElement) {
    exitFullscreen();
    document.getElementById("renderer0").style.height = "35vh";
  } else {
    launchIntoFullscreen(document.getElementById("video-container"));
    document.getElementById("renderer0").style.height = "100%";
  }
});

function launchIntoFullscreen(element) {
  if (element.requestFullscreen) {
    element.requestFullscreen();
  } else if (element.mozRequestFullScreen) {
    element.mozRequestFullScreen();
  } else if (element.webkitRequestFullscreen) {
    element.webkitRequestFullscreen();
  } else if (element.msRequestFullscreen) {
    element.msRequestFullscreen();
  } else { element.classList.toggle("fullscreen");
  }
}

function exitFullscreen() {
  if (document.exitFullscreen) {
    document.exitFullscreen();
  } else if (document.mozCancelFullScreen) {
    document.mozCancelFullScreen();
  } else if (document.webkitExitFullscreen) {
    document.webkitExitFullscreen();
  }
}
  // Set the date we're counting down to
  var countDownDate = new Date("{{ content.field_start_time_date.value | date("M,d,Y,H:i") }}").getTime();


//  var countDownDate = new Date("Jan 29, 2022 21:00:00").getTime();

  // Update the count down every 1 second
  var x = setInterval(function() {

    // Get today's date and time
    var now = new Date().getTime();

    // Find the distance between now and the count down date
    var distance = countDownDate - now;

    // Time calculations for days, hours, minutes and seconds
    var days = Math.floor(distance / (1000 * 60 * 60 * 24));
    var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
    var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
    var seconds = Math.floor((distance % (1000 * 60)) / 1000);

    document.getElementById(‘renderer’).style.backgroundImage = '{{ content.field_event_image}}';

    // Display the result in the element with id="demo"
    document.getElementById("count-down").innerHTML = hours + "h "
    + minutes + "m " + seconds + "s ";

    // If the count down is finished, write some text
    if (distance < 0) {
      clearInterval(x);
      document.getElementById("count-down").innerHTML = "EXPIRED";
    }
  }, 1000);
  </script>


  <!-- *********************   To add to theme **************** -->

  <script src="https://code.jquery.com/jquery-3.1.1.min.js" integrity="sha256-hVVnYaiADRTO2PzUGmuLJr8BLUSjGIZsDYGmIJLv2b8=" crossorigin="anonymous"></script>

  <!-- Here we load the application which knows how to
  invoke the VidyoConnector API. -->
  <script>
  // const OPEN_REMOTE_SLOT = "-1";
  //
  // function ShowRenderer(vidyoConnector, divId) {
  //     var rndr = document.getElementById(divId);
  //     vidyoConnector.ShowViewAt(divId, rndr.offsetLeft, rndr.offsetTop, rndr.offsetWidth, rndr.offsetHeight);
  // }
  //
  // // Run StartVidyoConnector when the VidyoClient is successfully loaded
  // function StartVidyoConnector(VC) {
  //     var vidyoConnector;
  //     var cameras = {};
  //     var microphones = {};
  //     var speakers = {};
  //     var selectedLocalCamera = {id: 0, camera: null};
  //     var cameraPrivacy = false;
  //     var microphonePrivacy = false;
  //     var remoteCameras = {};
  //     var configParams = {};
  //
  //     // rendererSlots[0] is used to render the local camera;
  //     // rendererSlots[1] through rendererSlots[5] are used to render up to 5 cameras from remote participants.
  //     var rendererSlots = ["1", OPEN_REMOTE_SLOT, OPEN_REMOTE_SLOT, OPEN_REMOTE_SLOT, OPEN_REMOTE_SLOT, OPEN_REMOTE_SLOT];
  //
  //     window.onresize = function() {
  //         showRenderers();
  //     };


  VC.CreateVidyoConnector({
  viewId: "renderer",                            // Div ID where the composited video will be rendered, see VidyoConnector.html
  viewStyle: "VIDYO_CONNECTORVIEWSTYLE_Default", // Visual style of the composited renderer
  remoteParticipants: 15,                        // Maximum number of participants
  logFileFilter: "warning all@VidyoConnector info@VidyoClient",
  logFileName:"",
  userData:""
}).then(function(vidyoConnector) {
   vidyoConnector.Connect({
     host: "prod.vidyo.io",
     token: "cHJvdmlzaW9uAHVzZXIxQGY2NmMwYi52aWR5by5pbwA2Mzc4MzkxOTExMQAAZTcxOGM1NWE0MTcxOGQyYjdlNDBlYTQ3MGZmZmQ5YWU0NTVjZTQ4YWFmY2RiMDc0NDRmYTQxMTg0YjI2OTczYzk2YWUzZGUwMDk3NGVjYjA1ZjMxNDZlOTRjZWEwYzA4",
     displayName: "Hello",
     resourceId: "Fabroom",
     // Define handlers for connection events.
     onSuccess: function()            {/* Connected */},
     onFailure: function(reason)      {/* Failed */},
     onDisconnected: function(reason) {/* Disconnected */}
    }).then(function(status) {
        if (status) {
            console.log("ConnectCall Success");
        } else {
            console.error("ConnectCall Failed");
        }
    }).catch(function() {
        console.error("ConnectCall Failed");
    });
}).catch(function() {
  console.error("CreateVidyoConnector Failed");
});

      // VC.CreateVidyoConnector({
      //     viewId: "renderervid", // Set to null in order to create a custom layout
      //     viewStyle: "VIDYO_CONNECTORVIEWSTYLE_Default", // Visual style of the composited renderer
      //     remoteParticipants: 16,     // Maximum number of participants to render
      //     logFileFilter: "warning info@VidyoClient info@VidyoConnector",
      //     logFileName: "VidyoConnector.log",
      //     userData: 0
      // }).then(function(vc) {
      //     vidyoConnector = vc;
      //     parseUrlParameters(configParams);
      //     registerDeviceListeners(vidyoConnector, cameras, microphones, speakers, rendererSlots, selectedLocalCamera, remoteCameras);
      //     handleDeviceChange(vidyoConnector, cameras, microphones, speakers);
      //     handleParticipantChange(vidyoConnector, rendererSlots, remoteCameras);
      //
      //     // Populate the connectionStatus with the client version
      //     vidyoConnector.GetVersion().then(function(version) {
      //         // $("#clientVersion").html("v " + version);
      //     }).catch(function() {
      //         console.error("GetVersion failed");
      //     });
      //
      //     // If enableDebug is configured then enable debugging
      //     if (configParams.enableDebug === "1") {
      //         vidyoConnector.EnableDebug({port:7776, logFilter: "warning info@VidyoClient info@VidyoConnector"}).then(function() {
      //             console.log("EnableDebug success");
      //         }).catch(function() {
      //             console.error("EnableDebug failed");
      //         });
      //     }


      // VC.CreateVidyoConnector({
      //         viewId: "renderervid",                            // Div ID where the composited video will be rendered
      //         viewStyle: "VIDYO_CONNECTORVIEWSTYLE_Default", // Visual style of the composited renderer
      //         remoteParticipants: 15,                        // Maximum number of remote participants to render
      //         logFileFilter: "warning all@VidyoConnector info@VidyoClient",
      //         logFileName: "",
      //         userData: ""
      //         }).then(function(vc) {
      //         vidyoConnector = vc;
      //         }).catch(function() {
      //         console.error("CreateVidyoConnector Failed");
      //         });


      /* JavaScript Example: */
      VC.CreateVidyoConnector({
        viewId: null,                                  // null indicates custom layout
        viewStyle: "VIDYO_CONNECTORVIEWSTYLE_Default", // n/a for custom layout
        remoteParticipants: 15,                        // n/a for custom layout
        logFileFilter: "warning all@VidyoConnector info@VidyoClient",
        logFileName: "",
        userData: ""
      }).then(function(vc) {
        vidyoConnector = vc;
      }).catch(function() {
        console.error("CreateVidyoConnector Failed");
      });
      /* custom local preview */
      vidyoConnector.RegisterLocalCameraEventListener({
        onAdded: function(localCamera) {
            /* New camera is available. */
        },
        onRemoved: function(localCamera) {
            /* Existing camera became unavailable. */
        },
        onSelected: function(localCamera) {
          if (localCamera) {
              /* Camera was selected by user or automatically */
              vidyoConnector.AssignViewToLocalCamera({
                viewId: "renderviewlocal",
                localCamera: localCamera,
                displayCropped: true,
                allowZoom: false
              });
              var rndr = document.getElementById("renderviewlocal");
              vidyoConnector.ShowViewAt({viewId: "renderviewlocal", x: rndr.offsetLeft, y: rndr.offsetTop,
                                         width: rndr.offsetWidth, height: rndr.offsetHeight});
          } else {
              vidyoConnector.HideView({ viewId: "Div where camera was rendered" });
          }
        },
        onStateUpdated: function(localCamera, state) { /* Camera state was updated */ }
      }).then(function() {
        console.log("RegisterLocalCameraEventListener Success");
      }).catch(function() {
        console.error("RegisterLocalCameraEventListener Failed");
      });
      /* Local camera change initiated by user. Note: this is an arbitrary function name. */
      function handleCameraChange() {
        /* Hide view of previously selected camera. */
        vidyoConnector.HideView({
          viewId: "renderviewlocalcam"
        });
        /* Select new camera */
        vidyoConnector.SelectLocalCamera({
          localCamera: camera
        });
      }
      /******************************************************************************/
      /* custom remote participant's source view */
      vidyoConnector.RegisterRemoteCameraEventListener({
        onAdded: function(remoteCamera, participant) {
          /* New camera is available. */
          if (/* This camera is desired to be viewed */) {
            vidyoConnector.AssignViewToRemoteCamera({
              viewId: "sourceview",
              remoteCamera: remoteCamera,
              displayCropped: true,
              allowZoom: false
            });
            var rndr = document.getElementById("sourceview");
            vidyoConnector.ShowViewAt({viewId: "sourceview", x: rndr.offsetLeft, y: rndr.offsetTop,
                                       width: rndr.offsetWidth, height: rndr.offsetHeight});
          }
        },
        onRemoved: function(remoteCamera, participant) {
          /* Existing camera became unavailable. */
          if (/* This camera was being viewed */) {
            vidyoConnector.HideView({
              viewId: "Div where camera is rendered"
            });
          }
        },
        onStateUpdated: function(remoteCamera, participant, state) { /* Camera state was updated */ }
      }).then(function() {
        console.log("RegisterRemoteCameraEventListener Success");
      }).catch(function() {
        console.error("RegisterRemoteCameraEventListener Failed");
      });
      /******************************************************************************/
      /* custom remote participant's window share view */
      vidyoConnector.RegisterRemoteWindowShareEventListener({
        onAdded: function(remoteWindowShare, participant) {
          /* New window is available for sharing. */
          if (/* This is the window that is desired to view */) {
            vidyoConnector.AssignViewToRemoteWindowShare({
              viewId: "shareview",
              remoteWindowShare: remoteWindowShare,
              displayCropped: true,
              allowZoom: false
            });
            var rndr = document.getElementById("shareview");
            vidyoConnector.ShowViewAt({viewId: "shareview", x: rndr.offsetLeft, y: rndr.offsetTop,
                                       width: rndr.offsetWidth, height: rndr.offsetHeight});
          }
        },
        onRemoved: function(remoteWindowShare, participant) {
          /* Existing window is no longer available for sharing */
          if (/* This is the window that was being viewed */) {
            vidyoConnector.HideView({
              viewId: "sharevieworiginal"
            });
          }
        },
        onStateUpdated: function(remoteWindowShare, participant, state) {
          /* Window share state was updated */
        }
      }).then(function() {
          console.log("RegisterRemoteWindowShareEventListener Success");
      }).catch(function() {
          console.error("RegisterRemoteWindowShareEventListener Failed");
      });









          // Join the conference if the autoJoin URL parameter was enabled
          if (configParams.autoJoin === "1") {
            joinLeave();
          } else {
            // Handle the join in the toolbar button being clicked by the end user.
            $("#joinLeaveButton").one("click", joinLeave);
          }
      }).catch(function(err) {
          console.error("CreateVidyoConnector Failed " + err);
      });

      // Handle the camera privacy button, toggle between show and hide.
      $("#cameraButton").click(function() {
          // CameraPrivacy button clicked
          cameraPrivacy = !cameraPrivacy;
          vidyoConnector.SetCameraPrivacy({
              privacy: cameraPrivacy
          }).then(function() {
              if (cameraPrivacy) {
                  // Hide the local camera preview, which is in slot 0
                  $("#cameraButton").addClass("cameraOff").removeClass("cameraOn");
                  vidyoConnector.HideView({ viewId: "renderer0" }).then(function() {
                      console.log("HideView Success");
                  }).catch(function(e) {
                      console.log("HideView Failed");
                  });
              } else {
                  // Show the local camera preview, which is in slot 0
                  $("#cameraButton").addClass("cameraOn").removeClass("cameraOff");
                  vidyoConnector.AssignViewToLocalCamera({
                      viewId: "renderer0",
                      localCamera: selectedLocalCamera.camera,
                      displayCropped: true,
                      allowZoom: false
                  }).then(function() {
                      console.log("AssignViewToLocalCamera Success");
                      ShowRenderer(vidyoConnector, "renderer0");
                  }).catch(function(e) {
                      console.log("AssignViewToLocalCamera Failed");
                  });
              }
              console.log("SetCameraPrivacy Success");
          }).catch(function() {
              console.error("SetCameraPrivacy Failed");
          });
      });

      // Handle the microphone mute button, toggle between mute and unmute audio.
      $("#microphoneButton").click(function() {
          // MicrophonePrivacy button clicked
          microphonePrivacy = !microphonePrivacy;
          vidyoConnector.SetMicrophonePrivacy({
              privacy: microphonePrivacy
          }).then(function() {
              if (microphonePrivacy) {
                  $("#microphoneButton").addClass("microphoneOff").removeClass("microphoneOn");
              } else {
                  $("#microphoneButton").addClass("microphoneOn").removeClass("microphoneOff");
              }
              console.log("SetMicrophonePrivacy Success");
          }).catch(function() {
              console.error("SetMicrophonePrivacy Failed");
          });
      });

      function joinLeave() {
          // join or leave dependent on the joinLeaveButton, whether it
          // contains the class callStart or callEnd.
          if ($("#joinLeaveButton").hasClass("callStart")) {
              $("#connectionStatus").html("Connecting... yes");

              $("#joinLeaveButton").removeClass("callStart").addClass("callEnd");
              $('#joinLeaveButton').prop('title', 'Leave Conference');

              connectToConference(vidyoConnector, rendererSlots, remoteCameras, configParams);
          } else {
              $("#connectionStatus").html("Disconnecting...");
              vidyoConnector.Disconnect().then(function() {
                  console.log("Disconnect Success");
              }).catch(function() {
                  console.error("Disconnect Failure");
              });
          }
          $("#joinLeaveButton").one("click", joinLeave);
      }

      $("#options").removeClass("optionsHide");
  }

  function registerDeviceListeners(vidyoConnector, cameras, microphones, speakers, rendererSlots, selectedLocalCamera, remoteCameras) {
      // Map the "None" option (whose value is 0) in the camera, microphone, and speaker drop-down menus to null since
      // a null argument to SelectLocalCamera, SelectLocalMicrophone, and SelectLocalSpeaker releases the resource.
      cameras[0]     = null;
      microphones[0] = null;
      speakers[0]    = null;

      // Handle appearance and disappearance of camera devices in the system
      vidyoConnector.RegisterLocalCameraEventListener({
          onAdded: function(localCamera) {
              // New camera is available
              $("#cameras").append("<option value='" + window.btoa(localCamera.id) + "'>" + localCamera.name + "</option>");
              cameras[window.btoa(localCamera.id)] = localCamera;
          },
          onRemoved: function(localCamera) {
              // Existing camera became unavailable
              $("#cameras option[value='" + window.btoa(localCamera.id) + "']").remove();
              delete cameras[window.btoa(localCamera.id)];

              // If the removed camera was the selected camera, then hide it
              if(selectedLocalCamera.id === localCamera.id) {
                  vidyoConnector.HideView({ viewId: "renderer0" }).then(function() {
                      console.log("HideView Success");
                  }).catch(function(e) {
                      console.log("HideView Failed");
                  });
              }
          },
          onSelected: function(localCamera) {
              // Camera was selected/unselected by you or automatically
              if(localCamera) {
                  $("#cameras option[value='" + window.btoa(localCamera.id) + "']").prop('selected', true);
                  selectedLocalCamera.id = localCamera.id;
                  selectedLocalCamera.camera = localCamera;

                  // Assign view to selected camera
                  vidyoConnector.AssignViewToLocalCamera({
                      viewId: "renderer0",
                      localCamera: localCamera,
                      displayCropped: true,
                      allowZoom: false
                  }).then(function() {
                      console.log("AssignViewToLocalCamera Success");
                      ShowRenderer(vidyoConnector, "renderer0");
                  }).catch(function(e) {
                      console.log("AssignViewToLocalCamera Failed");
                  });
              } else {
                  selectedLocalCamera.id = 0;
                  selectedLocalCamera.camera = null;
              }
          },
          onStateUpdated: function(localCamera, state) {
              // Camera state was updated
          }
      }).then(function() {
          console.log("RegisterLocalCameraEventListener Success");
      }).catch(function() {
          console.error("RegisterLocalCameraEventListener Failed");
      });

      // Handle appearance and disappearance of microphone devices in the system
      vidyoConnector.RegisterLocalMicrophoneEventListener({
          onAdded: function(localMicrophone) {
              // New microphone is available
              $("#microphones").append("<option value='" + window.btoa(localMicrophone.id) + "'>" + localMicrophone.name + "</option>");
              microphones[window.btoa(localMicrophone.id)] = localMicrophone;
          },
          onRemoved: function(localMicrophone) {
              // Existing microphone became unavailable
              $("#microphones option[value='" + window.btoa(localMicrophone.id) + "']").remove();
              delete microphones[window.btoa(localMicrophone.id)];
          },
          onSelected: function(localMicrophone) {
              // Microphone was selected/unselected by you or automatically
              if(localMicrophone)
                  $("#microphones option[value='" + window.btoa(localMicrophone.id) + "']").prop('selected', true);
          },
          onStateUpdated: function(localMicrophone, state) {
              // Microphone state was updated
          }
      }).then(function() {
          console.log("RegisterLocalMicrophoneEventListener Success");
      }).catch(function() {
          console.error("RegisterLocalMicrophoneEventListener Failed");
      });

      // Handle appearance and disappearance of speaker devices in the system
      vidyoConnector.RegisterLocalSpeakerEventListener({
          onAdded: function(localSpeaker) {
              // New speaker is available
              $("#speakers").append("<option value='" + window.btoa(localSpeaker.id) + "'>" + localSpeaker.name + "</option>");
              speakers[window.btoa(localSpeaker.id)] = localSpeaker;
          },
          onRemoved: function(localSpeaker) {
              // Existing speaker became unavailable
              $("#speakers option[value='" + window.btoa(localSpeaker.id) + "']").remove();
              delete speakers[window.btoa(localSpeaker.id)];
          },
          onSelected: function(localSpeaker) {
              // Speaker was selected/unselected by you or automatically
              if(localSpeaker)
                  $("#speakers option[value='" + window.btoa(localSpeaker.id) + "']").prop('selected', true);
          },
          onStateUpdated: function(localSpeaker, state) {
              // Speaker state was updated
          }
      }).then(function() {
          console.log("RegisterLocalSpeakerEventListener Success");
      }).catch(function() {
          console.error("RegisterLocalSpeakerEventListener Failed");
      });

      vidyoConnector.RegisterRemoteCameraEventListener({
          onAdded: function(camera, participant) {
              // Store the remote camera for this participant
              remoteCameras[participant.id] = {camera: camera, isRendered: false};

              // Scan through the renderer slots and look for an open slot.
              // If an open slot is found then assign it to the remote camera.
              for (var i = 1; i < rendererSlots.length; i++) {
                  if (rendererSlots[i] === OPEN_REMOTE_SLOT) {
                      rendererSlots[i] = participant.id;
                      remoteCameras[participant.id].isRendered = true;
                      vidyoConnector.AssignViewToRemoteCamera({
                          viewId: "renderer" + (i),
                          remoteCamera: camera,
                          displayCropped: true,
                          allowZoom: false
                      }).then(function(retValue) {
                          console.log("AssignViewToRemoteCamera " + participant.id + " to slot " + i + " = " + retValue);
                          ShowRenderer(vidyoConnector, "renderer" + (i));
                      }).catch(function() {
                          console.log("AssignViewToRemoteCamera Failed");
                          rendererSlots[i] = OPEN_REMOTE_SLOT;
                          remoteCameras[participant.id].isRendered = false;
                      });
                      break;
                  }
              }
          },
          onRemoved: function(camera, participant) {
              console.log("RegisterRemoteCameraEventListener onRemoved participant.id : " + participant.id);
              delete remoteCameras[participant.id];

              // Scan through the renderer slots and if this participant's camera
              // is being rendered in a slot, then clear the slot and hide the camera.
              for (var i = 1; i < rendererSlots.length; i++) {
                  if (rendererSlots[i] === participant.id) {
                      rendererSlots[i] = OPEN_REMOTE_SLOT;
                      console.log("Slot found, calling HideView on renderer" + i);
                      vidyoConnector.HideView({ viewId: "renderer" + (i) }).then(function() {
                          console.log("HideView Success");

                          // If a remote camera is not rendered in a slot, replace it in the slot that was just cleaered
                          for (var id in remoteCameras) {
                              if (!remoteCameras[id].isRendered) {
                                  rendererSlots[i] = id;
                                  remoteCameras[id].isRendered = true;
                                  vidyoConnector.AssignViewToRemoteCamera({
                                      viewId: "renderer" + (i),
                                      remoteCamera: remoteCameras[id].camera,
                                      displayCropped: true,
                                      allowZoom: false
                                  }).then(function(retValue) {
                                      console.log("AssignViewToRemoteCamera " + id + " to slot " + i + " = " + retValue);
                                      ShowRenderer(vidyoConnector, "renderer" + (i));
                                  }).catch(function() {
                                      console.log("AssignViewToRemoteCamera Failed");
                                      rendererSlots[i] = OPEN_REMOTE_SLOT;
                                      remoteCameras[id].isRendered = false;
                                  });
                                  break;
                              }
                          }
                      }).catch(function(e) {
                          console.log("HideView Failed");
                      });
                      break;
                  }
              }
          },
          onStateUpdated: function(camera, participant, state) {
              // Camera state was updated
          }
      }).then(function() {
          console.log("RegisterRemoteCameraEventListener Success");
      }).catch(function() {
          console.error("RegisterRemoteCameraEventListener Failed");
      });
  }

  function handleDeviceChange(vidyoConnector, cameras, microphones, speakers) {
      // Hook up camera selector functions for each of the available cameras
      $("#cameras").change(function() {
          // Camera selected from the drop-down menu
          $("#cameras option:selected").each(function() {
              // Hide the view of the previously selected local camera
              vidyoConnector.HideView({ viewId: "renderer0" });

              // Select the newly selected local camera
              camera = cameras[$(this).val()];
              vidyoConnector.SelectLocalCamera({
                  localCamera: camera
              }).then(function() {
                  console.log("SelectCamera Success");
              }).catch(function() {
                  console.error("SelectCamera Failed");
              });
          });
      });

      // Hook up microphone selector functions for each of the available microphones
      $("#microphones").change(function() {
          // Microphone selected from the drop-down menu
          $("#microphones option:selected").each(function() {
              microphone = microphones[$(this).val()];
              vidyoConnector.SelectLocalMicrophone({
                  localMicrophone: microphone
              }).then(function() {
                  console.log("SelectMicrophone Success");
              }).catch(function() {
                  console.error("SelectMicrophone Failed");
              });
          });
      });

      // Hook up speaker selector functions for each of the available speakers
      $("#speakers").change(function() {
          // Speaker selected from the drop-down menu
          $("#speakers option:selected").each(function() {
              speaker = speakers[$(this).val()];
              vidyoConnector.SelectLocalSpeaker({
                  localSpeaker: speaker
              }).then(function() {
                  console.log("SelectSpeaker Success");
              }).catch(function() {
                  console.error("SelectSpeaker Failed");
              });
          });
      });
  }

  function getParticipantName(participant, cb) {
      if (!participant) {
          cb("Undefined");
          return;
      }

      if (participant.name) {
          cb(participant.name);
          return;
      }

      participant.GetName().then(function(name) {
          cb(name);
      }).catch(function() {
          cb("GetNameFailed");
      });
  }

  function handleParticipantChange(vidyoConnector, rendererSlots, remoteCameras) {
      vidyoConnector.RegisterParticipantEventListener({
          onJoined: function(participant) {
              getParticipantName(participant, function(name) {
                  $("#participantStatus").html("" + name + " Joined");
                  console.log("Participant onJoined: " + name);
              });
          },
          onLeft: function(participant) {
              getParticipantName(participant, function(name) {
                  $("#participantStatus").html("" + name + " Left");
                  console.log("Participant onLeft: " + name);
              });
          },
          onDynamicChanged: function(participants, cameras) {
              // Order of participants changed
          },
          onLoudestChanged: function(participant, audioOnly) {
              getParticipantName(participant, function(name) {
                  $("#participantStatus").html("" + name + " Speaking");
              });

              // Check if the loudest speaker is being rendered in one of the slots
              var found = false;
              for (var i = 1; i < rendererSlots.length; i++) {
                  if (rendererSlots[i] === participant.id) {
                      found = true;
                      break;
                  }
              }
              console.log("onLoudestChanged: loudest speaker in rendererSlots? " + found);

              // First check if the participant's camera has been added to the remoteCameras dictionary
              if (!(participant.id in remoteCameras)) {
                  console.log("Warning: loudest speaker participant does not have a camera in remoteCameras");
              }
              // If the loudest speaker is not being rendered in one of the slots then
              // hide the slot 1 remote camera and assign loudest speaker to slot 1.
              else if (!found) {
                  // Set the isRendered flag to false of the remote camera which is being hidden
                  remoteCameras[rendererSlots[1]].isRendered = false;

                  // Assign slot 1 to the the loudest speaker's participant id
                  rendererSlots[1] = participant.id;

                  // Set the isRendered flag to true of the remote camera which has now been rendered
                  remoteCameras[participant.id].isRendered = true;

                  //Hiding the view first, before the AssignViewToRemoteCamera
                  vidyoConnector.HideView({ viewId: "renderer1"}).then(function() {
                      console.log("HideView Success");
                      vidyoConnector.AssignViewToRemoteCamera({
                          viewId: "renderer1",
                          remoteCamera: remoteCameras[participant.id].camera,
                          displayCropped: true,
                          allowZoom: false
                      }).then(function(retValue) {
                          console.log("AssignViewToRemoteCamera " + participant.id + " to slot 1" + " = " + retValue);
                          ShowRenderer(vidyoConnector, "renderer1");
                      }).catch(function() {
                          console.log("AssignViewToRemoteCamera Failed");
                          rendererSlots[1] = OPEN_REMOTE_SLOT;
                          remoteCameras[participant.id].isRendered = false;
                      });
                  }).catch(function(e) {
                      console.log("HideView Failed, loudest speaker not assigned");
                  });
              }
          }
      }).then(function() {
          console.log("RegisterParticipantEventListener Success");
      }).catch(function() {
          console.err("RegisterParticipantEventListener Failed");
      });
  }

  function parseUrlParameters(configParams) {


      // Fill in the form parameters from the URI
      var host = "prod.vidyo.io";
      if (host)
          $("#host").val(host);
          // alert(host);
      // var token = "cHJvdmlzaW9uAHVzZXIxQDU0ZGI4MC52aWR5by5pbwA2Mzc4MjI3NTg5NgAAMzkxYmM1NzQ3ODZiNjc4NTA2MDMwMTNkM2Q5OWQ0Njk0NWI5NjI2YjYzZTM4MTFkNTEwNDQ1ZDU0NGViOTBjM2E4OGQyNjBhZDFiNDdiYTdkOGE4MDhmOWE5Mzk3ZjIw";

      // var token = document.getElementById('joinLeaveButton').value;

        var token = "cHJvdmlzaW9uAHVzZXIxQDczZmUxNS52aWR5by5pbwA2Mzc4Mjk3ODA5NwAAZWY2YmNiNjY0NGZmYjVhYmY4OGQ2ZjAyZjZjODE3ZGU2MTBiZGYwYzA3MDAyMWUwZjk2YmFkZTMxOTgyOGVhZmFlMTY3MmE5YWY5NGRkNTQyNzE0NTY0ZGVhODkwZDNj";

      if (token)
          $("#token").val(token);
      var displayName = "EattoLive";
      if (displayName)
          $("#displayName").val(displayName);
      var resourceId = "pasta";
      if (resourceId)
          $("#resourceId").val(resourceId);

      configParams.autoJoin    = getUrlParameterByName("autoJoin");
      configParams.enableDebug = getUrlParameterByName("enableDebug");
      configParams.hideConfig  = getUrlParameterByName("hideConfig");

      // If the parameters are passed in the URI, do not display options dialog,
      // and automatically connect.
      if (host && token && displayName && resourceId) {
          $("#optionsParameters").addClass("optionsHidePermanent");
      }

      if (configParams.hideConfig=="1") {
          updateRenderers(true);
      }

      return;
  }

  function showRenderers() {
      ShowRenderer(vidyoConnector, "renderer0");
      ShowRenderer(vidyoConnector, "renderer1");
      ShowRenderer(vidyoConnector, "renderer2");
      ShowRenderer(vidyoConnector, "renderer3");
      ShowRenderer(vidyoConnector, "renderer4");
      ShowRenderer(vidyoConnector, "renderer5");
  }

  function updateRenderers(fullscreen) {
      if (fullscreen) {
          $("#options").addClass("optionsHide");
          $("#renderer0").css({'position': 'absolute', 'left':  '0%', 'right': '66%', 'top': '0px', 'bottom': '54%',  'width': '34%' ,  'height': '44%'});
          $("#renderer1").css({'position': 'absolute', 'left': '34%', 'right': '33%', 'top': '0px', 'bottom': '54%',  'width': '33%'});
          $("#renderer2").css({'position': 'absolute', 'left': '67%', 'right':  '0%', 'top': '0px', 'bottom': '54%',  'width': '33%'});
          $("#renderer3").css({'position': 'absolute', 'left':  '0%', 'right': '66%', 'top': '46%', 'bottom': '60px', 'width': '34%'});
          $("#renderer4").css({'position': 'absolute', 'left': '34%', 'right': '33%', 'top': '46%', 'bottom': '60px', 'width': '33%'});
          $("#renderer5").css({'position': 'absolute', 'left': '67%', 'right':  '0%', 'top': '46%', 'bottom': '60px', 'width': '33%'});
      } else {
          $("#options").removeClass("optionsHide");
          $("#renderer0").css({'position': 'absolute', 'left': '25%', 'right': '0%', 'top': '0px', 'bottom': '60px',  'width': '75%'});
          $("#renderer1").css({'position': 'absolute', 'width': '0px'});
          $("#renderer2").css({'position': 'absolute', 'width': '0px'});
          $("#renderer3").css({'position': 'absolute', 'width': '0px'});
          $("#renderer4").css({'position': 'absolute', 'width': '0px'});
          $("#renderer5").css({'position': 'absolute', 'width': '0px'});
      }

      showRenderers();
  }

  // Attempt to connect to the conference
  // We will also handle connection failures
  // and network or server-initiated disconnects.
  function connectToConference(vidyoConnector, rendererSlots, remoteCameras, configParams) {
      // Abort the Connect call if resourceId is invalid. It cannot contain empty spaces or "@".
      //


      // if ( $("#resourceId").val().indexOf(" ") != -1 || $("#resourceId").val().indexOf("@") != -1) {
      //     REMOVED TO KEEP FUNCITONAL
      //     console.error("Connect call aborted due to invalid Resource ID");
      //     connectorDisconnected(rendererSlots, remoteCameras, "Disconnected", "");
      //     $("#error").html("<h3>Failed due to invalid Resource ID" + "</h3>");
      //     return;
      // }

      // Clear messages
      $("#error").html("");
      $("#message").html("<h3 class='blink'>CONNECTING.....</h3>");

      var token = document.getElementById('joinLeaveButton').value;

      var displayName = document.getElementById('displayNameButton').value;



      var resourceId = "CleverBear";

      console.log(displayName);

      vidyoConnector.Connect({
          // Take input from options form
          // host: $("#host").val(),
          // token: $("#token").val(),
          // displayName: $("#displayName").val(),
          // resourceId: $("#resourceId").val(),



          host:"prod.vidyo.io",  // Server name, for most production apps it will be prod.vidyo.io
          // token:"cHJvdmlzaW9uAHVzZXIxQDczZmUxNS52aWR5by5pbwA2Mzc4Mjk3ODA5NwAAZWY2YmNiNjY0NGZmYjVhYmY4OGQ2ZjAyZjZjODE3ZGU2MTBiZGYwYzA3MDAyMWUwZjk2YmFkZTMxOTgyOGVhZmFlMTY3MmE5YWY5NGRkNTQyNzE0NTY0ZGVhODkwZDNj",
          token:token,          // Add generated token (https://developer.vidyo.io/documentation/4-1-16-8/getting-started#Tokens)
          displayName:displayName,  // Display name
          resourceId:resourceId,

          // Define handlers for connection events.
          onSuccess: function() {
              // Connected

              console.log("vidyoConnector.Connect : onSuccess callback received");

              $("#connectionStatus").html("Connected to something");
              if (configParams.hideConfig != "1") {
                  updateRenderers(true);
              }
              $("#message").html("");

          },
          onFailure: function(reason) {
              // Failed
              console.error("vidyoConnector.Connect : onFailure callback received");
              connectorDisconnected(rendererSlots, remoteCameras, "Failed", "");
              $("#error").html("<h3>Call Failed: " + reason + "</h3>");
              document.getElementById("status").innerHTML = ("<h3>Call Failed: " + reason + "</h3>");
          },
          onDisconnected: function(reason) {
              // Disconnected
              console.log("vidyoConnector.Connect : onDisconnected callback received");
              connectorDisconnected(rendererSlots, remoteCameras, "Disconnected", "Call Disconnected: " + reason);
              document.getElementById("status").innerHTML = ("<h3>Call Failed: " + reason + "</h3>");
              if (configParams.hideConfig != "1") {
                 updateRenderers(false);
              }
          }
      }).then(function(status) {
          if (status) {
              document.getElementById("status").innerHTML = "Getting there";
              console.log("Connect Success");
          } else {
              console.error("Connect Failed");
              connectorDisconnected(rendererSlots, remoteCameras, "Failed", "");
              $("#error").html("<h3>Call Failed" + "</h3>");
          }
      }).catch(function() {
          console.error("Connect Failed");
          connectorDisconnected(rendererSlots, remoteCameras, "Failed", "");
          $("#error").html("<h3>Call Failed" + "</h3>");
      });
  }

  // Connector either fails to connect or a disconnect completed, update UI
  // elements and clear rendererSlots and remoteCameras.
  function connectorDisconnected(rendererSlots, remoteCameras, connectionStatus, message) {
      $("#connectionStatus").html(connectionStatus);
      $("#message").html(message);
      $("#participantStatus").html("");
      $("#joinLeaveButton").removeClass("callEnd").addClass("callStart");
      $('#joinLeaveButton').prop('title', 'Join Conference');

      // Clear rendererSlots and remoteCameras when not connected in case not cleared
      // in RegisterRemoteCameraEventListener onRemoved.
      for (var i = 1; i < rendererSlots.length; i++) {
          if (rendererSlots[i] != OPEN_REMOTE_SLOT) {
              rendererSlots[i] = OPEN_REMOTE_SLOT;
              console.log("Calling HideView on renderer" + i);
              vidyoConnector.HideView({ viewId: "renderer" + (i) }).then(function() {
                  console.log("HideView Success");
              }).catch(function(e) {
                  console.log("HideView Failed");
              });
          }
      }
      remoteCameras = {};
  }

  // Extract the desired parameter from the browser's location bar
  function getUrlParameterByName(name) {
      var match = RegExp('[?&]' + name + '=([^&]*)').exec(window.location.search);
      return match && decodeURIComponent(match[1].replace(/\+/g, ' '));
  }



  </script>
  <script type="text/javascript">
  function onVidyoClientLoaded(status) {
    console.log("Status: " + status.state + "Description: " + status.description);
    switch (status.state) {
      case "READY":    // The library is operating normally
        $("#connectionStatus").html("Click phone icon to Connect");
        $("#helper").addClass("hidden");
        $("#helperFooter").addClass("hidden");
        // $("#toolbuttons").addClass("hidden");

        // After the VidyoClient is successfully initialized a global VC object will become available
        // All of the VidyoConnector gui and logic is implemented in VidyoConnectorCustomLayout.js
        StartVidyoConnector(VC);
        break;
      case "RETRYING": // The library operating is temporarily paused
        $("#connectionStatus").html("Temporarily unavailable retrying in " + status.nextTimeout/1000 + " seconds");
        break;
      case "FAILED":   // The library operating has stopped
        ShowFailed(status);
        $("#connectionStatus").html("Failed: " + status.description);
        break;
      case "FAILEDVERSION":   // The library operating has stopped
        UpdateHelperPaths(status);
        ShowFailedVersion(status);
        $("#connectionStatus").html("Failed: " + status.description);
        break;
      case "NOTAVAILABLE": // The library is not available
        UpdateHelperPaths(status);
        $("#connectionStatus").html(status.description);
        break;
    }
    return true; // Return true to reload the plugins if not available
  }
  function UpdateHelperPaths(status) {
    $("#helperPlugInDownload").attr("href", status.downloadPathPlugIn);
    $("#helperAppDownload").attr("href", status.downloadPathApp);
  }
  function ShowFailed(status) {
    var helperText = '';
     // Display the error
    helperText += '<h2>An error occurred, please reload</h2>';
    helperText += '<p>' + status.description + '</p>';

    $("#helperText").html(helperText);
    $("#failedText").html(helperText);
    $("#failed").removeClass("hidden");
  }
  function ShowFailedVersion(status) {
    var helperText = '';
     // Display the error
    helperText += '<h4>Please Download a new plugIn and restart the browser</h4>';
    helperText += '<p>' + status.description + '</p>';

    $("#helperText").html(helperText);
  }

  function loadVidyoClientLibrary(webrtc, plugin) {
    // If webrtc, then set webrtcLogLevel
    var webrtcLogLevel = "";
    if (webrtc) {
      // Set the WebRTC log level to either: 'info' (default), 'error', or 'none'
      webrtcLogLevel = '&webrtcLogLevel=info';
    }

    //We need to ensure we're loading the VidyoClient library and listening for the callback.
    var script = document.createElement('script');
    script.type = 'text/javascript';
    script.src = 'https://static.vidyo.io/4.1.15.7/javascript/VidyoClient/VidyoClient.js?onload=onVidyoClientLoaded&webrtc=' + webrtc + '&plugin=' + plugin + webrtcLogLevel;
    document.getElementsByTagName('head')[0].appendChild(script);
  }
  function joinViaBrowser() {
    $("#helperText").html("Loading...");
    $("#helperPicker").addClass("hidden");
    loadVidyoClientLibrary(true, false);
  }

  function joinViaPlugIn() {
    $("#helperText").html("Don't have the PlugIn?");
    $("#helperPicker").addClass("hidden");
    $("#helperPlugIn").removeClass("hidden");
    loadVidyoClientLibrary(false, true);
  }

  function joinViaElectron() {
    $("#helperText").html("Electron...");
    $("#helperPicker").addClass("hidden");
    loadVidyoClientLibrary(false, true);
  }


  function joinViaOtherApp() {
    $("#helperText").html("Don't have the app?");
    $("#helperPicker").addClass("hidden");
    $("#helperOtherApp").removeClass("hidden");
    var protocolHandlerLink = 'vidyoconnector://' + window.location.search;
    /* launch */
    $("#helperOtherAppLoader").attr('src', protocolHandlerLink);
    loadVidyoClientLibrary(false, false);
  }

  function loadHelperOptions() {
    var userAgent = navigator.userAgent || navigator.vendor || window.opera;

    // Opera 8.0+
    var isOpera = (userAgent.indexOf("Opera") || userAgent.indexOf('OPR')) != -1 ;
    // Firefox
    var isFirefox = userAgent.indexOf("Firefox") != -1;
    // Chrome 1+
    var isChrome = userAgent.indexOf("Chrome") != -1;
    // Safari
    var isSafari = !isChrome && userAgent.indexOf("Safari") != -1;
    // AppleWebKit
    var isAppleWebKit = !isSafari && !isChrome && userAgent.indexOf("AppleWebKit") != -1;
    // Internet Explorer 6-11
    var isIE = (userAgent.indexOf("MSIE") != -1 ) || (!!document.documentMode == true );
    // Edge 20+
    var isEdge = !isIE && !!window.StyleMedia;
    // Check if Mac
    var isMac = navigator.platform.indexOf('Mac') > -1;
    // Check if Windows
    var isWin = navigator.platform.indexOf('Win') > -1;
    // Check if Linux
    var isLinux = navigator.platform.indexOf('Linux') > -1;
    // Check if Android
    var isAndroid = userAgent.indexOf("android") > -1;

    if (!isMac && !isWin && !isLinux) {
      /* Mobile App*/
      if (isChrome) {
        /* Supports WebRTC */
        $("#joinViaBrowser").removeClass("hidden");
      }
    } else {


      if (isChrome || isFirefox) {
        /* Supports WebRTC */
        $("#joinViaBrowser").removeClass("hidden");
      }
      if (isSafari || isFirefox || (isAppleWebKit && isMac) || (isIE && !isEdge)) {
        /* Supports Plugins */
        $("#joinViaPlugIn").removeClass("hidden");
      }
    }
  }
  // Runs when the page loads
  $(function() {
    var connectorType = getUrlParameterByName("connectorType");
    var isElectron = (typeof process === 'object') && process.versions && (process.versions.electron !== undefined);
    if (connectorType == "app") {
      joinViaApp();
    } else if (connectorType == "browser") {
      joinViaBrowser();
    } else {
    if (isElectron) {
    joinViaElectron();
    } else {
      loadHelperOptions();
      }
    }
  });
  </script>

      <div{{ content_attributes.addClass('node__content', 'clearfix') }}>
        <!-- { content|without('field_event_image', 'field_event_start', 'field_event_address', 'field_event_time','field_event_map', 'field_token', 'comment') }} -->
      </div>
      <script type="text/javascript" src="//maps.google.com/maps/api/js?sensor=true&key=AIzaSyDWg9eU2MO9E0PF1ZMw9sFVJoPVU4Z6s3o"></script>
      <script type="text/javascript" src="{{theme_uri}}/vendor/gmap3.js"></script>
      <script type="text/javascript" src="{{theme_uri}}/vendor/jquery.ui.map.min.js"></script>


      {% if content.comment %}
        <div id="node-single-comment">
          {{ content.comment }}
        </div>
      {% endif %}

    </div>

  </div>

</article>

<!-- End Display article for detail page -->
{% endif %}
